{"version":3,"sources":["components/EventForm.js","components/ListView.js","components/CalendarView.js","App.js","serviceWorker.js","index.js"],"names":["EventForm","refresh","myEvent","id","formName","formDesc","formDate","formTime","formType","name","desc","date","slice","tempDate","Date","tempHour","getHours","tempMin","getMinutes","type","renderSubmit","cancel","useState","setName","setDesc","setDate","time","setTime","setType","key","value","onClick","onSubmit","e","preventDefault","fullDate","getDate","setHours","setMinutes","updatedEvent","archived","fetch","process","method","headers","body","JSON","stringify","then","addedEvent","placeholder","onChange","target","required","htmlFor","ListView","list","setList","update","setUpdate","eventToUpdate","setEventToUpdate","useEffect","getList","renderForm","response","json","displayList","map","displayDate","midday","displayHour","parseInt","displayPast","displayMin","concat","now","_id","className","toDateString","isUpdate","CalendarView","dateClicked","setDateClicked","dateEventDisplay","clickedDate","eventOnClickedDay","filter","event","getFullYear","getMonth","length","tileContent","calDate","view","onClickDay","tileClassName","toString","App","toggleViewButton","isCalView","setCalView","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39dae3a3.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nconst EventForm = ({refresh, myEvent, id}) => {\r\n    let formName = \"\";\r\n    let formDesc = \"\";\r\n    let formDate = \"\";\r\n    let formTime = \"\";\r\n    let formType = \"Appointment\";\r\n    if(myEvent){               //if I want an update form instead of an add form, I want to plug in the initial values\r\n        formName = myEvent.name;\r\n        formDesc = myEvent.desc;\r\n        formDate = myEvent.date.slice(0, 10);\r\n        let tempDate = new Date(myEvent.date);\r\n        let tempHour = tempDate.getHours();     //the time input expects 12:00AM to be 00:00\r\n        let tempMin = tempDate.getMinutes();\r\n        if(tempHour < 10) {\r\n            tempHour = '0' + tempHour;\r\n        }\r\n        if(tempMin < 10) {\r\n            tempMin = '0' + tempMin;\r\n        }\r\n        formTime = tempHour + \":\" + tempMin;\r\n        formType = myEvent.type;\r\n    }\r\n    const [name, setName] = useState(formName);\r\n    const [desc, setDesc] = useState(formDesc);\r\n    const [date, setDate] = useState(formDate);   //Stores Month, Day, and Year\r\n    const [time, setTime] = useState(formTime);   //Stores Hour, Minutes, and AM/PM\r\n    const [type, setType] = useState(formType);\r\n\r\n    const handleSubmit = (e) => {           //While I usually spell out event, I don't here because of event becoming overloaded\r\n        e.preventDefault();\r\n        const archived = false;\r\n        const fullDate = new Date(date);\r\n        fullDate.setDate(fullDate.getDate() + 1);   //have to add one to date since date value captured by form starts at index 0\r\n        fullDate.setHours(time.slice(0, 2));\r\n        fullDate.setMinutes(time.slice(3, 5));\r\n        if(myEvent) {\r\n            const updatedEvent = {name, desc, date: fullDate, type, archived}\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/scheduler/${id}`, {\r\n                method: 'PUT',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(updatedEvent)\r\n            }).then(() => setName(''))\r\n            .then(() => setDesc(''))\r\n            .then(() => setDate(''))\r\n            .then(() => setTime(''))\r\n            .then(() => setType(''))\r\n            .then(() => refresh())\r\n        }else {\r\n            const addedEvent = {name, desc, date: fullDate, type, archived};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/scheduler`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(addedEvent)\r\n            }).then(() => setName(''))\r\n                .then(() => setDesc(''))\r\n                .then(() => setDate(''))\r\n                .then(() => setTime(''))\r\n                .then(() => setType(''))\r\n                .then(() => refresh())\r\n        }\r\n    }\r\n    let renderSubmit;\r\n    let cancel;\r\n    if(myEvent){\r\n        renderSubmit = <input key=\"Edit\" value=\"Edit Event\" type=\"submit\"/>\r\n        cancel = <button type=\"button\" key=\"cancel\" \r\n                onClick={() => refresh()}>Cancel Edit</button>\r\n    } else {\r\n        renderSubmit = <input key=\"Add\" value=\"Add Event\" type=\"submit\"/>\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input placeholder=\"Event Name\" value={name} type=\"text\" \r\n                onChange={({target}) => setName(target.value)} required/>\r\n            <textarea placeholder=\"Event Description\" value={desc} type=\"text\" \r\n                onChange={({target}) => setDesc(target.value)}/>\r\n            <label htmlFor=\"date\">Event Date:</label>\r\n            <input value={date} id=\"date\" type=\"date\" \r\n                onChange={({target}) => setDate(target.value)} required/>\r\n            <label htmlFor=\"date\">Event Time:</label>\r\n            <input value={time} id= \"time\" type=\"time\" \r\n                onChange={({target}) => setTime(target.value)} required/>\r\n            <label htmlFor=\"type\">Event Type:</label>\r\n            <select value={type} id=\"type\" \r\n                onChange={({target}) => setType(target.value)}>\r\n                <option value= \"Appointment\">Appointment</option>\r\n                <option value= \"Meeting\">Meeting</option>\r\n                <option value= \"Reminder\">Reminder</option>\r\n            </select>\r\n            {renderSubmit}\r\n            {cancel}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EventForm;\r\n","import React, {useState, useEffect} from 'react';\r\nimport EventForm from './EventForm'\r\n\r\nconst ListView = () => {\r\n    const [list, setList] = useState([]);\r\n    const [update, setUpdate] = useState(false);\r\n    const [eventToUpdate, setEventToUpdate] = useState('');\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, []);\r\n\r\n    const getList = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/scheduler`)\r\n            .then(response => response.json())\r\n            .then(list => setList(list))\r\n            .then(setUpdate(false))\r\n            .then(setEventToUpdate(''))\r\n    }\r\n    const handleUpdate = (eventUp) => {\r\n        setEventToUpdate(eventUp);\r\n        setUpdate(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/scheduler/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(response => response.json())\r\n            .then(getList)\r\n    }\r\n    const displayList = list.map((myEvent) => {\r\n        const displayDate = new Date(myEvent.date);\r\n        let midday = \"AM\";\r\n        let displayHour = displayDate.getHours();\r\n        if (parseInt(displayHour) >= 12) {           //Converts military time to actual time\r\n            midday = \"PM\";\r\n        }\r\n        if (parseInt(displayHour) > 12) {\r\n            displayHour = parseInt(displayHour) - 12;\r\n        }\r\n        if (parseInt(displayHour) == 0) {\r\n            displayHour = parseInt(displayHour) + 12;\r\n        }\r\n        let displayMin = displayDate.getMinutes(); \r\n        if (parseInt(displayMin) < 10){             //Ensures that minute display is always 2 digits\r\n            displayMin = '0'.concat(displayMin);\r\n        }\r\n        let displayPast;\r\n        if(displayDate < Date.now()){\r\n            displayPast = \"Past Event: \"\r\n        }\r\n        return (\r\n            <div key={myEvent._id} className=\"event\">\r\n                \r\n                <h3>{displayPast}{myEvent.name}- {displayDate.toDateString()} at {displayHour}:{displayMin}{midday}</h3> \r\n                <button onClick={() => handleUpdate(myEvent)}>Edit</button>\r\n                <button onClick={() => handleDelete(myEvent._id)}>Delete</button> \r\n                <p>{myEvent.type}. {myEvent.desc}</p>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    let renderForm;\r\n    if(update) {\r\n        renderForm = <EventForm key={eventToUpdate._id} isUpdate={update} refresh={getList} myEvent ={eventToUpdate} id={eventToUpdate._id}/>\r\n    } else {\r\n        renderForm = <EventForm key=\"Create\" isUpdate={update} refresh={getList}/>\r\n    }\r\n    return (\r\n        <div className=\"listview\">\r\n            {renderForm}\r\n            {displayList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListView;","import React, {useState, useEffect} from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nimport EventForm from './EventForm'\r\n\r\nconst CalendarView = () => {\r\n    const [list, setList] = useState([]);\r\n    const [update, setUpdate] = useState(false);\r\n    const [eventToUpdate, setEventToUpdate] = useState('');\r\n    const [dateClicked, setDateClicked] = useState('');\r\n\r\n    useEffect(() => {\r\n        getList();\r\n    }, []);\r\n\r\n    const getList = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/scheduler`)\r\n            .then(response => response.json())\r\n            .then(list => setList(list))\r\n            .then(setUpdate(false))\r\n            .then(setEventToUpdate(''))\r\n    }\r\n    const handleUpdate = (eventUp) => {\r\n        setEventToUpdate(eventUp);\r\n        setUpdate(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/scheduler/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(response => response.json())\r\n            .then(getList)\r\n    }\r\n    const tileContent = ({ date, view }) => {\r\n        let calDate = new Date(date);\r\n        let eventDays = list.filter(event => {\r\n            let tempDate = new Date(event.date);\r\n            return tempDate.getFullYear() == calDate.getFullYear() \r\n                && tempDate.getMonth() == calDate.getMonth()\r\n                && tempDate.getDate() == calDate.getDate()\r\n        });\r\n        return eventDays.map((myEvent) => {\r\n            const displayDate = new Date(myEvent.date);\r\n            let midday = \"AM\";\r\n            let displayHour = displayDate.getHours();\r\n            if (parseInt(displayHour) >= 12) {           //Converts military time to actual time\r\n                midday = \"PM\";\r\n            }\r\n            if (parseInt(displayHour) > 12) {\r\n                displayHour = parseInt(displayHour) - 12;\r\n            }\r\n            if (parseInt(displayHour) == 0) {\r\n                displayHour = parseInt(displayHour) + 12;\r\n            }\r\n            let displayMin = displayDate.getMinutes(); \r\n            if (parseInt(displayMin) < 10){             //Ensures that minute display is always 2 digits\r\n                displayMin = '0'.concat(displayMin);\r\n            }\r\n            return (\r\n                <div key={myEvent._id}  className=\"Event\">\r\n                   {displayHour}:{displayMin}{midday}\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n    const tileClassName = ({date, view}) => {\r\n        let calDate = new Date(date);\r\n        let eventDays = list.filter(event => {\r\n            let tempDate = new Date(event.date);\r\n            return tempDate.getFullYear() == calDate.getFullYear()\r\n                && tempDate.getMonth() == calDate.getMonth()\r\n                && tempDate.getDate() == calDate.getDate()               \r\n        });\r\n        return eventDays.length ? 'EventDays' : null;\r\n    }\r\n    let dateEventDisplay;\r\n    if(dateClicked) {\r\n        let clickedDate = new Date(dateClicked);\r\n        let eventOnClickedDay = list.filter(event => {\r\n            let tempDate = new Date(event.date);\r\n            return tempDate.getFullYear() == clickedDate.getFullYear() \r\n                && tempDate.getMonth() == clickedDate.getMonth()\r\n                && tempDate.getDate() == clickedDate.getDate()\r\n\r\n        });\r\n        dateEventDisplay = eventOnClickedDay.map((myEvent) => {\r\n                const displayDate = new Date(myEvent.date);\r\n                let midday = \"AM\";\r\n                let displayHour = displayDate.getHours();\r\n                if (parseInt(displayHour) >= 12) {           //Converts military time to actual time\r\n                    midday = \"PM\";\r\n                }\r\n                if (parseInt(displayHour) > 12) {\r\n                    displayHour = parseInt(displayHour) - 12;\r\n                }\r\n                if (parseInt(displayHour) == 0) {\r\n                    displayHour = parseInt(displayHour) + 12;\r\n                }\r\n                let displayMin = displayDate.getMinutes(); \r\n                if (parseInt(displayMin) < 10){             //Ensures that minute display is always 2 digits\r\n                    displayMin = '0'.concat(displayMin);\r\n                }\r\n                let displayPast;\r\n                if(displayDate < Date.now()){\r\n                    displayPast = \"Past Event: \"\r\n                }\r\n                return (\r\n                    <div key={myEvent._id}>\r\n                        <h4>{displayPast}{myEvent.name} at {displayHour}:{displayMin}{midday}</h4>\r\n                        <button className='myButton' \r\n                            onClick={() => handleUpdate(myEvent)}>Edit</button>\r\n                        <button className='myButton' \r\n                            onClick={() => handleDelete(myEvent._id)}>Delete</button> \r\n                        <p>{myEvent.type}. {myEvent.desc}</p>\r\n                    </div>\r\n                )\r\n        });\r\n        if(eventOnClickedDay.length == 0){\r\n            dateEventDisplay = <div key= \"empty\">No events for this date</div>\r\n        }\r\n    } else {\r\n        dateEventDisplay = <div key=\"nodate\">Select a date for its event content</div>\r\n    }\r\n    const onClickDay = (value, event) => {\r\n        setDateClicked(new Date(value));\r\n    }\r\n    \r\n    let renderForm;\r\n    if(update) {\r\n        renderForm = <EventForm key={eventToUpdate._id} \r\n            isUpdate={update} refresh={getList} \r\n            myEvent ={eventToUpdate} \r\n            id={eventToUpdate._id}/>\r\n    } else {\r\n        renderForm = <EventForm key=\"Create\" \r\n            isUpdate={update} refresh={getList}/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"calview\">\r\n            <Calendar tileContent={tileContent} \r\n                onClickDay={onClickDay} \r\n                className=\"myCalendar\" \r\n                tileClassName={tileClassName}/>\r\n            {renderForm}\r\n            <h3>Events for Selected Date {dateClicked.toString().slice(0,15)}</h3>\r\n            {dateEventDisplay}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CalendarView;","import React, {useState} from 'react';\n\nimport './stylesheets/App.css';\nimport ListView from './components/ListView';\nimport CalendarView from './components/CalendarView';\n\nconst App = () => {\n  const [isCalView, setCalView] = useState(true);\n  let toggleViewButton;\n  let view;\n  if(isCalView) {\n    view = <CalendarView/>\n    toggleViewButton = <button className='myButton' \n      onClick={() => setCalView(false)}>Switch to List View</button>\n  } else {\n    view = <ListView/>\n    toggleViewButton = <button className='myButton' \n      onClick={() => setCalView(true)}>Switch to Calendar View</button>\n  }\n  return (\n    <div className=\"App\">\n      <h1>Event Scheduler</h1>\n      {toggleViewButton}\n      {view}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}